public class Ex14 extends Tester {

    /**
     * @param s is the string that the method run on.
     * @param c the start and end letter to determine string.
     * @return How many string exists with the 'c' letter.
     */

    public static int subStrC(String s, char c) {
        int counter = 0;
        int two = 0;
        int temp = 0;
        if (s != null) { //if the string isn't null.
            for (int i = 0; i < s.length(); i++) {

                if (s.charAt(i) == c) {
                    counter++;// count every time that meeting c letter.
                }
                if (counter == 2 && s.charAt(i) == c) {
                    two = i;//two variable is save the index of the current i.
                }
                if (counter == 3) {
                    temp++;// increment every sub strings.
                    counter = 0; //resets the counter to 0.
                    //  s = s.substring(two);
                    i = two - 1;//need to get the two -1 so he wont miss counting c in index 0.

                }
            }
        }
        return temp;
    }

    /**
     * @param s is the string that the method run on.
     * @param c the start and end letter to determine string.
     * @param k the maximum number of allowed 'c' in the string.
     * @return How many strings exists with the 'c' letter according int k.
     */

    public static int subStrMaxC(String s, char c, int k) {
        k = k + 2;// + 2 counting the start c and the end c and cover the case that k = 0
        int counterC = 0;
        int totalC = 0;
        if (s != null) { // if the string isn't null
            for (int j = 0; j < s.length(); j++) {
                if (s.charAt(j) == c) {
                    counterC++;
                }
                if (counterC == 2 && k == 2 && j == s.length() - 1) {//if k = 0 and there is only 2 c in the string
                    totalC++;
                }
                if (counterC < 2) {
                    totalC = 0;
                }
                if (counterC >= 2 && counterC <= k && j != s.length() - 1) {
                    totalC++;
                }
            }
        }
        return totalC;
    }

    /**
     * @param a
     */
    public static void zeroDistance(int[] a) {
        int counterD = 0;
        for (int h = 0; h < a.length; h++) {
            if (a[h] == 0) {
                counterD = 0;
                counterD++;
            }
            if (a[h] != 0) {
                a[h] = counterD;
                counterD++;
            }
        }
        for (int p = a.length - 1; p > 0; p--) {
            if (a[p] == 0) {
                counterD = 0;
                counterD++;
            }
            if (a[p] != 0 && counterD < a[p]) {
                a[p] = counterD;
                counterD++;
            }
        }
    }

    /**
     * @param s the original String.
     * @param t the transformation String we need to check
     * @return if the 't' string is really the transformation string of 's'.
     */
    public static boolean isTrans(String s, String t) {

        if (s != null && t != null) {
            if (s.equals(t)) {
                return true;
            }
            if (s.length() == 0 && t.length() == 0) {
                return true;
            }
            if (s.length() == 0 || t.length() == 0) {
                return false;

            }
            if (s.charAt(0) != t.charAt(0)) {
                return false;
            }
            return isTrans(s.substring(1), t.substring(1)) || isTrans(s, t.substring(1));
        }

        return false;
    }

    /**
     * @param mat a given matrix to test on.
     * @return how many possible ways there is form the first place to the end.
     */
    public static int countPaths(int[][] mat) {
        return countPaths(mat, 0, 0, mat.length - 1, mat[0].length - 1);

    }

    /**
     * private method for calculation how many possible ways there is form the first place to the end.
     */
    private static int countPaths(int[][] mat, int x, int y, int x2, int y2) {
        int counter = 0;
        if (!borderOk(mat, x, y))
            return 0;

        if (x == x2 && y == y2) {
            return 1;
        }
        counter = countPaths(mat, x + (mat[x][y] / 10), y + (mat[x][y] % 10), x2, y2) +
                countPaths(mat, x + (mat[x][y] % 10), y + (mat[x][y] / 10), x2, y2);


        return counter;
    }

    /**
     * Private Method that check if the current place is in border.
     */
    private static boolean borderOk(int[][] mat, int x, int y) {
        if (x < 0 || x >= mat.length || y < 0 || y >= mat[0].length || mat[x][y] < 0 || mat[x][y] > 100)
            return false;
        return true;
    }


}
